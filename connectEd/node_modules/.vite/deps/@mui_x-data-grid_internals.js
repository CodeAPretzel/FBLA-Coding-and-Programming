import {
  COLUMNS_DIMENSION_PROPERTIES,
  DATA_GRID_DEFAULT_SLOTS_COMPONENTS,
  EMPTY_DETAIL_PANELS,
  EMPTY_RENDER_CONTEXT,
  GRID_DEFAULT_STRATEGY,
  GRID_ID_AUTOGENERATED,
  GridBaseColumnHeaders,
  GridColumnHeaderRow,
  GridSignature,
  GridVirtualScroller,
  GridVirtualScrollerContent,
  GridVirtualScrollerRenderZone,
  MemoizedGridHeaders,
  applyInitialState,
  buildRootGroup,
  buildWarning,
  calculatePinnedRowsHeight,
  clamp,
  clearWarningsCache,
  columnGroupsStateInitializer,
  columnMenuStateInitializer,
  columnResizeStateInitializer,
  columnsStateInitializer,
  computeFlexColumnsWidth,
  computeSlots,
  createColumnsState,
  createControllablePromise,
  createSelector,
  createSelectorMemoized,
  createUseGridApiEventHandler,
  deepClone,
  defaultGetRowsToExport,
  densityStateInitializer,
  dimensionsStateInitializer,
  editingStateInitializer,
  escapeRegExp,
  eslintUseValue,
  exportAs,
  fastMemo,
  filterStateInitializer,
  findParentElementFromClassName,
  focusStateInitializer,
  getActiveElement,
  getColumnsToExport,
  getFirstNonSpannedColumnToRender,
  getGridFilter,
  getPublicApiRef,
  getRowIdFromRowModel,
  getTotalHeaderHeight,
  getTreeNodeDescendants,
  getVisibleRows,
  gridAdditionalRowGroupsSelector,
  gridColumnDefinitionsSelector,
  gridColumnFieldsSelector,
  gridColumnLookupSelector,
  gridColumnPositionsSelector,
  gridColumnVisibilityModelSelector,
  gridColumnsStateSelector,
  gridColumnsTotalWidthSelector,
  gridEditRowsStateSelector,
  gridFilterableColumnDefinitionsSelector,
  gridFilterableColumnLookupSelector,
  gridHasColSpanSelector,
  gridHeaderFilteringEditFieldSelector,
  gridHeaderFilteringMenuSelector,
  gridPinnedColumnsSelector,
  gridPinnedRowsSelector,
  gridRenderContextColumnsSelector,
  gridRenderContextSelector,
  gridVirtualizationColumnEnabledSelector,
  gridVirtualizationEnabledSelector,
  gridVirtualizationSelector,
  gridVisibleColumnDefinitionsSelector,
  gridVisibleColumnFieldsSelector,
  gridVisiblePinnedColumnDefinitionsSelector,
  hydrateColumnsWidth,
  isDeepEqual,
  isEventTargetInPortal,
  isFunction,
  isNavigationKey,
  isNumber,
  isObject,
  isPasteShortcut,
  isSingleSelectColDef,
  localStorageAvailable,
  paginationStateInitializer,
  passFilterLogic,
  preferencePanelStateInitializer,
  propValidatorsDataGrid,
  randomNumberBetween,
  range,
  rowSelectionStateInitializer,
  rowsMetaStateInitializer,
  rowsStateInitializer,
  serializeCellValue,
  shouldCellShowLeftBorder,
  shouldCellShowRightBorder,
  sortingStateInitializer,
  unstable_resetCleanupTracking,
  unwrapPrivateAPI,
  useFirstRender,
  useGridApiEventHandler,
  useGridApiMethod,
  useGridApiOptionHandler,
  useGridClipboard,
  useGridColumnGrouping,
  useGridColumnHeaders,
  useGridColumnMenu,
  useGridColumnResize,
  useGridColumnSpanning,
  useGridColumns,
  useGridCsvExport,
  useGridDensity,
  useGridDimensions,
  useGridEditing,
  useGridEvents,
  useGridFilter,
  useGridFocus,
  useGridInitialization,
  useGridInitializeState,
  useGridKeyboardNavigation,
  useGridLogger,
  useGridNativeEventListener,
  useGridPagination,
  useGridParamsApi,
  useGridPreferencesPanel,
  useGridPrintExport,
  useGridPrivateApiContext,
  useGridRegisterPipeProcessor,
  useGridRegisterStrategyProcessor,
  useGridRowSelection,
  useGridRowSelectionPreProcessors,
  useGridRows,
  useGridRowsMeta,
  useGridRowsPreProcessors,
  useGridScroll,
  useGridSelector,
  useGridSorting,
  useGridStatePersistence,
  useGridVirtualScroller,
  useGridVirtualization,
  useGridVisibleRows,
  useProps,
  useResizeObserver,
  useRunOnce,
  validateProps,
  virtualizationStateInitializer
} from "./chunk-CJT2HIIB.js";
import {
  _extends,
  init_extends,
  useOnMount,
  useTimeout
} from "./chunk-RUHF5NGJ.js";
import "./chunk-ZRJG7NCB.js";
import "./chunk-GEFUK6AI.js";
import "./chunk-CTRIHH5C.js";
import {
  require_react
} from "./chunk-2EXEP7CN.js";
import {
  __toESM
} from "./chunk-WXXH56N5.js";

// node_modules/@mui/x-data-grid/hooks/features/headerFiltering/useGridHeaderFiltering.js
init_extends();
var React = __toESM(require_react());
var headerFilteringStateInitializer = (state, props) => _extends({}, state, {
  headerFiltering: {
    enabled: props.headerFilters ?? false,
    editing: null,
    menuOpen: null
  }
});
var useGridHeaderFiltering = (apiRef, props) => {
  const logger = useGridLogger(apiRef, "useGridHeaderFiltering");
  const setHeaderFilterState = React.useCallback((headerFilterState) => {
    apiRef.current.setState((state) => {
      if (props.signature === "DataGrid") {
        return state;
      }
      return _extends({}, state, {
        headerFiltering: {
          enabled: props.headerFilters ?? false,
          editing: headerFilterState.editing ?? null,
          menuOpen: headerFilterState.menuOpen ?? null
        }
      });
    });
    apiRef.current.forceUpdate();
  }, [apiRef, props.signature, props.headerFilters]);
  const startHeaderFilterEditMode = React.useCallback((field) => {
    logger.debug(`Starting edit mode on header filter for field: ${field}`);
    apiRef.current.setHeaderFilterState({
      editing: field
    });
  }, [apiRef, logger]);
  const stopHeaderFilterEditMode = React.useCallback(() => {
    logger.debug(`Stopping edit mode on header filter`);
    apiRef.current.setHeaderFilterState({
      editing: null
    });
  }, [apiRef, logger]);
  const showHeaderFilterMenu = React.useCallback((field) => {
    logger.debug(`Opening header filter menu for field: ${field}`);
    apiRef.current.setHeaderFilterState({
      menuOpen: field
    });
  }, [apiRef, logger]);
  const hideHeaderFilterMenu = React.useCallback(() => {
    logger.debug(`Hiding header filter menu for active field`);
    let fieldToFocus = apiRef.current.state.headerFiltering.menuOpen;
    if (fieldToFocus) {
      const columnLookup = gridColumnLookupSelector(apiRef);
      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
      const orderedFields = gridColumnFieldsSelector(apiRef);
      if (!columnLookup[fieldToFocus]) {
        fieldToFocus = orderedFields[0];
      }
      if (columnVisibilityModel[fieldToFocus] === false) {
        const visibleOrderedFields = orderedFields.filter((field) => {
          if (field === fieldToFocus) {
            return true;
          }
          return columnVisibilityModel[field] !== false;
        });
        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
      }
      apiRef.current.setHeaderFilterState({
        menuOpen: null
      });
      apiRef.current.setColumnHeaderFilterFocus(fieldToFocus);
    }
  }, [apiRef, logger]);
  const headerFilterPrivateApi = {
    setHeaderFilterState
  };
  const headerFilterApi = {
    startHeaderFilterEditMode,
    stopHeaderFilterEditMode,
    showHeaderFilterMenu,
    hideHeaderFilterMenu
  };
  useGridApiMethod(apiRef, headerFilterApi, "public");
  useGridApiMethod(apiRef, headerFilterPrivateApi, "private");
  const isFirstRender = React.useRef(true);
  React.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      apiRef.current.setHeaderFilterState({
        enabled: props.headerFilters ?? false
      });
    }
  }, [apiRef, props.headerFilters]);
};
export {
  COLUMNS_DIMENSION_PROPERTIES,
  DATA_GRID_DEFAULT_SLOTS_COMPONENTS,
  EMPTY_DETAIL_PANELS,
  EMPTY_RENDER_CONTEXT,
  GRID_DEFAULT_STRATEGY,
  GRID_ID_AUTOGENERATED,
  GridBaseColumnHeaders,
  GridColumnHeaderRow,
  MemoizedGridHeaders as GridHeaders,
  GridSignature,
  GridVirtualScroller,
  GridVirtualScrollerContent,
  GridVirtualScrollerRenderZone,
  applyInitialState,
  buildRootGroup,
  buildWarning,
  calculatePinnedRowsHeight,
  clamp,
  clearWarningsCache,
  columnGroupsStateInitializer,
  columnMenuStateInitializer,
  columnResizeStateInitializer,
  columnsStateInitializer,
  computeFlexColumnsWidth,
  computeSlots,
  createColumnsState,
  createControllablePromise,
  createSelector,
  createSelectorMemoized,
  createUseGridApiEventHandler,
  deepClone,
  defaultGetRowsToExport,
  densityStateInitializer,
  dimensionsStateInitializer,
  editingStateInitializer,
  escapeRegExp,
  eslintUseValue,
  exportAs,
  fastMemo,
  filterStateInitializer,
  findParentElementFromClassName,
  focusStateInitializer,
  getActiveElement,
  getColumnsToExport,
  getFirstNonSpannedColumnToRender,
  getGridFilter,
  getPublicApiRef,
  getRowIdFromRowModel,
  getTotalHeaderHeight,
  getTreeNodeDescendants,
  getVisibleRows,
  gridAdditionalRowGroupsSelector,
  gridColumnDefinitionsSelector,
  gridColumnFieldsSelector,
  gridColumnLookupSelector,
  gridColumnPositionsSelector,
  gridColumnVisibilityModelSelector,
  gridColumnsStateSelector,
  gridColumnsTotalWidthSelector,
  gridEditRowsStateSelector,
  gridFilterableColumnDefinitionsSelector,
  gridFilterableColumnLookupSelector,
  gridHasColSpanSelector,
  gridHeaderFilteringEditFieldSelector,
  gridHeaderFilteringMenuSelector,
  gridPinnedColumnsSelector,
  gridPinnedRowsSelector,
  gridRenderContextColumnsSelector,
  gridRenderContextSelector,
  gridVirtualizationColumnEnabledSelector,
  gridVirtualizationEnabledSelector,
  gridVirtualizationSelector,
  gridVisibleColumnDefinitionsSelector,
  gridVisibleColumnFieldsSelector,
  gridVisiblePinnedColumnDefinitionsSelector,
  headerFilteringStateInitializer,
  hydrateColumnsWidth,
  isDeepEqual,
  isEventTargetInPortal,
  isFunction,
  isNavigationKey,
  isNumber,
  isObject,
  isPasteShortcut,
  isSingleSelectColDef,
  localStorageAvailable,
  paginationStateInitializer,
  passFilterLogic,
  preferencePanelStateInitializer,
  propValidatorsDataGrid,
  randomNumberBetween,
  range,
  rowSelectionStateInitializer,
  rowsMetaStateInitializer,
  rowsStateInitializer,
  serializeCellValue,
  shouldCellShowLeftBorder,
  shouldCellShowRightBorder,
  sortingStateInitializer,
  unstable_resetCleanupTracking,
  unwrapPrivateAPI,
  useFirstRender,
  useGridApiEventHandler,
  useGridApiMethod,
  useGridApiOptionHandler,
  useGridClipboard,
  useGridColumnGrouping,
  useGridColumnHeaders,
  useGridColumnMenu,
  useGridColumnResize,
  useGridColumnSpanning,
  useGridColumns,
  useGridCsvExport,
  useGridDensity,
  useGridDimensions,
  useGridEditing,
  useGridEvents,
  useGridFilter,
  useGridFocus,
  useGridHeaderFiltering,
  useGridInitialization,
  useGridInitializeState,
  useGridKeyboardNavigation,
  useGridLogger,
  useGridNativeEventListener,
  useGridPagination,
  useGridParamsApi,
  useGridPreferencesPanel,
  useGridPrintExport,
  useGridPrivateApiContext,
  useGridRegisterPipeProcessor,
  useGridRegisterStrategyProcessor,
  useGridRowSelection,
  useGridRowSelectionPreProcessors,
  useGridRows,
  useGridRowsMeta,
  useGridRowsPreProcessors,
  useGridScroll,
  useGridSelector,
  useGridSorting,
  useGridStatePersistence,
  useGridVirtualScroller,
  useGridVirtualization,
  useGridVisibleRows,
  useOnMount,
  useProps,
  useResizeObserver,
  useRunOnce,
  useTimeout,
  validateProps,
  virtualizationStateInitializer
};
//# sourceMappingURL=@mui_x-data-grid_internals.js.map
