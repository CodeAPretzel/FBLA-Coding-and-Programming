{
  "version": 3,
  "sources": ["../../immutability-helper/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction stringifiable(obj) {\n    // Safely stringify Object.create(null)\n    /* istanbul ignore next */\n    return typeof obj === 'object' && !('toString' in obj) ?\n        Object.prototype.toString.call(obj).slice(8, -1) :\n        obj;\n}\nvar isProduction = typeof process === 'object' && process.env.NODE_ENV === 'production';\nfunction invariant(condition, message) {\n    if (!condition) {\n        /* istanbul ignore next */\n        if (isProduction) {\n            throw new Error('Invariant failed');\n        }\n        throw new Error(message());\n    }\n}\nexports.invariant = invariant;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\nvar toString = Object.prototype.toString;\nfunction type(obj) {\n    return toString.call(obj).slice(8, -1);\n}\nvar assign = Object.assign || /* istanbul ignore next */ (function (target, source) {\n    getAllKeys(source).forEach(function (key) {\n        if (hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    });\n    return target;\n});\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function'\n    ? function (obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)); }\n    /* istanbul ignore next */\n    : function (obj) { return Object.keys(obj); };\nfunction copy(object) {\n    return Array.isArray(object)\n        ? assign(object.constructor(object.length), object)\n        : (type(object) === 'Map')\n            ? new Map(object)\n            : (type(object) === 'Set')\n                ? new Set(object)\n                : (object && typeof object === 'object')\n                    ? assign(Object.create(Object.getPrototypeOf(object)), object)\n                    /* istanbul ignore next */\n                    : object;\n}\nvar Context = /** @class */ (function () {\n    function Context() {\n        this.commands = assign({}, defaultCommands);\n        this.update = this.update.bind(this);\n        // Deprecated: update.extend, update.isEquals and update.newContext\n        this.update.extend = this.extend = this.extend.bind(this);\n        this.update.isEquals = function (x, y) { return x === y; };\n        this.update.newContext = function () { return new Context().update; };\n    }\n    Object.defineProperty(Context.prototype, \"isEquals\", {\n        get: function () {\n            return this.update.isEquals;\n        },\n        set: function (value) {\n            this.update.isEquals = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Context.prototype.extend = function (directive, fn) {\n        this.commands[directive] = fn;\n    };\n    Context.prototype.update = function (object, $spec) {\n        var _this = this;\n        var spec = (typeof $spec === 'function') ? { $apply: $spec } : $spec;\n        if (!(Array.isArray(object) && Array.isArray(spec))) {\n            invariant(!Array.isArray(spec), function () { return \"update(): You provided an invalid spec to update(). The spec may \" +\n                \"not contain an array except as the value of $set, $push, $unshift, \" +\n                \"$splice or any custom command allowing an array value.\"; });\n        }\n        invariant(typeof spec === 'object' && spec !== null, function () { return \"update(): You provided an invalid spec to update(). The spec and \" +\n            \"every included key path must be plain objects containing one of the \" +\n            (\"following commands: \" + Object.keys(_this.commands).join(', ') + \".\"); });\n        var nextObject = object;\n        getAllKeys(spec).forEach(function (key) {\n            if (hasOwnProperty.call(_this.commands, key)) {\n                var objectWasNextObject = object === nextObject;\n                nextObject = _this.commands[key](spec[key], nextObject, spec, object);\n                if (objectWasNextObject && _this.isEquals(nextObject, object)) {\n                    nextObject = object;\n                }\n            }\n            else {\n                var nextValueForKey = type(object) === 'Map'\n                    ? _this.update(object.get(key), spec[key])\n                    : _this.update(object[key], spec[key]);\n                var nextObjectValue = type(nextObject) === 'Map'\n                    ? nextObject.get(key)\n                    : nextObject[key];\n                if (!_this.isEquals(nextValueForKey, nextObjectValue)\n                    || typeof nextValueForKey === 'undefined'\n                        && !hasOwnProperty.call(object, key)) {\n                    if (nextObject === object) {\n                        nextObject = copy(object);\n                    }\n                    if (type(nextObject) === 'Map') {\n                        nextObject.set(key, nextValueForKey);\n                    }\n                    else {\n                        nextObject[key] = nextValueForKey;\n                    }\n                }\n            }\n        });\n        return nextObject;\n    };\n    return Context;\n}());\nexports.Context = Context;\nvar defaultCommands = {\n    $push: function (value, nextObject, spec) {\n        invariantPushAndUnshift(nextObject, spec, '$push');\n        return value.length ? nextObject.concat(value) : nextObject;\n    },\n    $unshift: function (value, nextObject, spec) {\n        invariantPushAndUnshift(nextObject, spec, '$unshift');\n        return value.length ? value.concat(nextObject) : nextObject;\n    },\n    $splice: function (value, nextObject, spec, originalObject) {\n        invariantSplices(nextObject, spec);\n        value.forEach(function (args) {\n            invariantSplice(args);\n            if (nextObject === originalObject && args.length) {\n                nextObject = copy(originalObject);\n            }\n            splice.apply(nextObject, args);\n        });\n        return nextObject;\n    },\n    $set: function (value, _nextObject, spec) {\n        invariantSet(spec);\n        return value;\n    },\n    $toggle: function (targets, nextObject) {\n        invariantSpecArray(targets, '$toggle');\n        var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n        targets.forEach(function (target) {\n            nextObjectCopy[target] = !nextObject[target];\n        });\n        return nextObjectCopy;\n    },\n    $unset: function (value, nextObject, _spec, originalObject) {\n        invariantSpecArray(value, '$unset');\n        value.forEach(function (key) {\n            if (Object.hasOwnProperty.call(nextObject, key)) {\n                if (nextObject === originalObject) {\n                    nextObject = copy(originalObject);\n                }\n                delete nextObject[key];\n            }\n        });\n        return nextObject;\n    },\n    $add: function (values, nextObject, _spec, originalObject) {\n        invariantMapOrSet(nextObject, '$add');\n        invariantSpecArray(values, '$add');\n        if (type(nextObject) === 'Map') {\n            values.forEach(function (_a) {\n                var key = _a[0], value = _a[1];\n                if (nextObject === originalObject && nextObject.get(key) !== value) {\n                    nextObject = copy(originalObject);\n                }\n                nextObject.set(key, value);\n            });\n        }\n        else {\n            values.forEach(function (value) {\n                if (nextObject === originalObject && !nextObject.has(value)) {\n                    nextObject = copy(originalObject);\n                }\n                nextObject.add(value);\n            });\n        }\n        return nextObject;\n    },\n    $remove: function (value, nextObject, _spec, originalObject) {\n        invariantMapOrSet(nextObject, '$remove');\n        invariantSpecArray(value, '$remove');\n        value.forEach(function (key) {\n            if (nextObject === originalObject && nextObject.has(key)) {\n                nextObject = copy(originalObject);\n            }\n            nextObject.delete(key);\n        });\n        return nextObject;\n    },\n    $merge: function (value, nextObject, _spec, originalObject) {\n        invariantMerge(nextObject, value);\n        getAllKeys(value).forEach(function (key) {\n            if (value[key] !== nextObject[key]) {\n                if (nextObject === originalObject) {\n                    nextObject = copy(originalObject);\n                }\n                nextObject[key] = value[key];\n            }\n        });\n        return nextObject;\n    },\n    $apply: function (value, original) {\n        invariantApply(value);\n        return value(original);\n    },\n};\nvar defaultContext = new Context();\nexports.isEquals = defaultContext.update.isEquals;\nexports.extend = defaultContext.extend;\nexports.default = defaultContext.update;\n// @ts-ignore\nexports.default.default = module.exports = assign(exports.default, exports);\n// invariants\nfunction invariantPushAndUnshift(value, spec, command) {\n    invariant(Array.isArray(value), function () { return \"update(): expected target of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(value) + \".\"; });\n    invariantSpecArray(spec[command], command);\n}\nfunction invariantSpecArray(spec, command) {\n    invariant(Array.isArray(spec), function () { return \"update(): expected spec of \" + stringifiable(command) + \" to be an array; got \" + stringifiable(spec) + \". \" +\n        \"Did you forget to wrap your parameter in an array?\"; });\n}\nfunction invariantSplices(value, spec) {\n    invariant(Array.isArray(value), function () { return \"Expected $splice target to be an array; got \" + stringifiable(value); });\n    invariantSplice(spec.$splice);\n}\nfunction invariantSplice(value) {\n    invariant(Array.isArray(value), function () { return \"update(): expected spec of $splice to be an array of arrays; got \" + stringifiable(value) + \". \" +\n        \"Did you forget to wrap your parameters in an array?\"; });\n}\nfunction invariantApply(fn) {\n    invariant(typeof fn === 'function', function () { return \"update(): expected spec of $apply to be a function; got \" + stringifiable(fn) + \".\"; });\n}\nfunction invariantSet(spec) {\n    invariant(Object.keys(spec).length === 1, function () { return \"Cannot have more than one key in an object with $set\"; });\n}\nfunction invariantMerge(target, specValue) {\n    invariant(specValue && typeof specValue === 'object', function () { return \"update(): $merge expects a spec of type 'object'; got \" + stringifiable(specValue); });\n    invariant(target && typeof target === 'object', function () { return \"update(): $merge expects a target of type 'object'; got \" + stringifiable(target); });\n}\nfunction invariantMapOrSet(target, command) {\n    var typeOfTarget = type(target);\n    invariant(typeOfTarget === 'Map' || typeOfTarget === 'Set', function () { return \"update(): \" + stringifiable(command) + \" expects a target of type Set or Map; got \" + stringifiable(typeOfTarget); });\n}\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,aAAS,cAAc,KAAK;AAGxB,aAAO,OAAO,QAAQ,YAAY,EAAE,cAAc,OAC9C,OAAO,UAAU,SAAS,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE,IAC/C;AAAA,IACR;AACA,QAAI,eAAe,OAAO,YAAY,YAAY;AAClD,aAAS,UAAU,WAAW,SAAS;AACnC,UAAI,CAAC,WAAW;AAEZ,YAAI,cAAc;AACd,gBAAM,IAAI,MAAM,kBAAkB;AAAA,QACtC;AACA,cAAM,IAAI,MAAM,QAAQ,CAAC;AAAA,MAC7B;AAAA,IACJ;AACA,YAAQ,YAAY;AACpB,QAAI,iBAAiB,OAAO,UAAU;AACtC,QAAI,SAAS,MAAM,UAAU;AAC7B,QAAI,WAAW,OAAO,UAAU;AAChC,aAAS,KAAK,KAAK;AACf,aAAO,SAAS,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE;AAAA,IACzC;AACA,QAAI,SAAS,OAAO;AAAA,IAAsC,SAAU,QAAQ,QAAQ;AAChF,iBAAW,MAAM,EAAE,QAAQ,SAAU,KAAK;AACtC,YAAI,eAAe,KAAK,QAAQ,GAAG,GAAG;AAClC,iBAAO,GAAG,IAAI,OAAO,GAAG;AAAA,QAC5B;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AACA,QAAI,aAAa,OAAO,OAAO,0BAA0B,aACnD,SAAU,KAAK;AAAE,aAAO,OAAO,KAAK,GAAG,EAAE,OAAO,OAAO,sBAAsB,GAAG,CAAC;AAAA,IAAG,IAEpF,SAAU,KAAK;AAAE,aAAO,OAAO,KAAK,GAAG;AAAA,IAAG;AAChD,aAAS,KAAK,QAAQ;AAClB,aAAO,MAAM,QAAQ,MAAM,IACrB,OAAO,OAAO,YAAY,OAAO,MAAM,GAAG,MAAM,IAC/C,KAAK,MAAM,MAAM,QACd,IAAI,IAAI,MAAM,IACb,KAAK,MAAM,MAAM,QACd,IAAI,IAAI,MAAM,IACb,UAAU,OAAO,WAAW,WACzB,OAAO,OAAO,OAAO,OAAO,eAAe,MAAM,CAAC,GAAG,MAAM,IAE3D;AAAA,IACtB;AACA,QAAI;AAAA;AAAA,MAAyB,WAAY;AACrC,iBAASA,WAAU;AACf,eAAK,WAAW,OAAO,CAAC,GAAG,eAAe;AAC1C,eAAK,SAAS,KAAK,OAAO,KAAK,IAAI;AAEnC,eAAK,OAAO,SAAS,KAAK,SAAS,KAAK,OAAO,KAAK,IAAI;AACxD,eAAK,OAAO,WAAW,SAAU,GAAG,GAAG;AAAE,mBAAO,MAAM;AAAA,UAAG;AACzD,eAAK,OAAO,aAAa,WAAY;AAAE,mBAAO,IAAIA,SAAQ,EAAE;AAAA,UAAQ;AAAA,QACxE;AACA,eAAO,eAAeA,SAAQ,WAAW,YAAY;AAAA,UACjD,KAAK,WAAY;AACb,mBAAO,KAAK,OAAO;AAAA,UACvB;AAAA,UACA,KAAK,SAAU,OAAO;AAClB,iBAAK,OAAO,WAAW;AAAA,UAC3B;AAAA,UACA,YAAY;AAAA,UACZ,cAAc;AAAA,QAClB,CAAC;AACD,QAAAA,SAAQ,UAAU,SAAS,SAAU,WAAW,IAAI;AAChD,eAAK,SAAS,SAAS,IAAI;AAAA,QAC/B;AACA,QAAAA,SAAQ,UAAU,SAAS,SAAU,QAAQ,OAAO;AAChD,cAAI,QAAQ;AACZ,cAAI,OAAQ,OAAO,UAAU,aAAc,EAAE,QAAQ,MAAM,IAAI;AAC/D,cAAI,EAAE,MAAM,QAAQ,MAAM,KAAK,MAAM,QAAQ,IAAI,IAAI;AACjD,sBAAU,CAAC,MAAM,QAAQ,IAAI,GAAG,WAAY;AAAE,qBAAO;AAAA,YAES,CAAC;AAAA,UACnE;AACA,oBAAU,OAAO,SAAS,YAAY,SAAS,MAAM,WAAY;AAAE,mBAAO,2IAErE,yBAAyB,OAAO,KAAK,MAAM,QAAQ,EAAE,KAAK,IAAI,IAAI;AAAA,UAAM,CAAC;AAC9E,cAAI,aAAa;AACjB,qBAAW,IAAI,EAAE,QAAQ,SAAU,KAAK;AACpC,gBAAI,eAAe,KAAK,MAAM,UAAU,GAAG,GAAG;AAC1C,kBAAI,sBAAsB,WAAW;AACrC,2BAAa,MAAM,SAAS,GAAG,EAAE,KAAK,GAAG,GAAG,YAAY,MAAM,MAAM;AACpE,kBAAI,uBAAuB,MAAM,SAAS,YAAY,MAAM,GAAG;AAC3D,6BAAa;AAAA,cACjB;AAAA,YACJ,OACK;AACD,kBAAI,kBAAkB,KAAK,MAAM,MAAM,QACjC,MAAM,OAAO,OAAO,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,IACvC,MAAM,OAAO,OAAO,GAAG,GAAG,KAAK,GAAG,CAAC;AACzC,kBAAI,kBAAkB,KAAK,UAAU,MAAM,QACrC,WAAW,IAAI,GAAG,IAClB,WAAW,GAAG;AACpB,kBAAI,CAAC,MAAM,SAAS,iBAAiB,eAAe,KAC7C,OAAO,oBAAoB,eACvB,CAAC,eAAe,KAAK,QAAQ,GAAG,GAAG;AAC1C,oBAAI,eAAe,QAAQ;AACvB,+BAAa,KAAK,MAAM;AAAA,gBAC5B;AACA,oBAAI,KAAK,UAAU,MAAM,OAAO;AAC5B,6BAAW,IAAI,KAAK,eAAe;AAAA,gBACvC,OACK;AACD,6BAAW,GAAG,IAAI;AAAA,gBACtB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,CAAC;AACD,iBAAO;AAAA,QACX;AACA,eAAOA;AAAA,MACX,EAAE;AAAA;AACF,YAAQ,UAAU;AAClB,QAAI,kBAAkB;AAAA,MAClB,OAAO,SAAU,OAAO,YAAY,MAAM;AACtC,gCAAwB,YAAY,MAAM,OAAO;AACjD,eAAO,MAAM,SAAS,WAAW,OAAO,KAAK,IAAI;AAAA,MACrD;AAAA,MACA,UAAU,SAAU,OAAO,YAAY,MAAM;AACzC,gCAAwB,YAAY,MAAM,UAAU;AACpD,eAAO,MAAM,SAAS,MAAM,OAAO,UAAU,IAAI;AAAA,MACrD;AAAA,MACA,SAAS,SAAU,OAAO,YAAY,MAAM,gBAAgB;AACxD,yBAAiB,YAAY,IAAI;AACjC,cAAM,QAAQ,SAAU,MAAM;AAC1B,0BAAgB,IAAI;AACpB,cAAI,eAAe,kBAAkB,KAAK,QAAQ;AAC9C,yBAAa,KAAK,cAAc;AAAA,UACpC;AACA,iBAAO,MAAM,YAAY,IAAI;AAAA,QACjC,CAAC;AACD,eAAO;AAAA,MACX;AAAA,MACA,MAAM,SAAU,OAAO,aAAa,MAAM;AACtC,qBAAa,IAAI;AACjB,eAAO;AAAA,MACX;AAAA,MACA,SAAS,SAAU,SAAS,YAAY;AACpC,2BAAmB,SAAS,SAAS;AACrC,YAAI,iBAAiB,QAAQ,SAAS,KAAK,UAAU,IAAI;AACzD,gBAAQ,QAAQ,SAAU,QAAQ;AAC9B,yBAAe,MAAM,IAAI,CAAC,WAAW,MAAM;AAAA,QAC/C,CAAC;AACD,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,SAAU,OAAO,YAAY,OAAO,gBAAgB;AACxD,2BAAmB,OAAO,QAAQ;AAClC,cAAM,QAAQ,SAAU,KAAK;AACzB,cAAI,OAAO,eAAe,KAAK,YAAY,GAAG,GAAG;AAC7C,gBAAI,eAAe,gBAAgB;AAC/B,2BAAa,KAAK,cAAc;AAAA,YACpC;AACA,mBAAO,WAAW,GAAG;AAAA,UACzB;AAAA,QACJ,CAAC;AACD,eAAO;AAAA,MACX;AAAA,MACA,MAAM,SAAU,QAAQ,YAAY,OAAO,gBAAgB;AACvD,0BAAkB,YAAY,MAAM;AACpC,2BAAmB,QAAQ,MAAM;AACjC,YAAI,KAAK,UAAU,MAAM,OAAO;AAC5B,iBAAO,QAAQ,SAAU,IAAI;AACzB,gBAAI,MAAM,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC;AAC7B,gBAAI,eAAe,kBAAkB,WAAW,IAAI,GAAG,MAAM,OAAO;AAChE,2BAAa,KAAK,cAAc;AAAA,YACpC;AACA,uBAAW,IAAI,KAAK,KAAK;AAAA,UAC7B,CAAC;AAAA,QACL,OACK;AACD,iBAAO,QAAQ,SAAU,OAAO;AAC5B,gBAAI,eAAe,kBAAkB,CAAC,WAAW,IAAI,KAAK,GAAG;AACzD,2BAAa,KAAK,cAAc;AAAA,YACpC;AACA,uBAAW,IAAI,KAAK;AAAA,UACxB,CAAC;AAAA,QACL;AACA,eAAO;AAAA,MACX;AAAA,MACA,SAAS,SAAU,OAAO,YAAY,OAAO,gBAAgB;AACzD,0BAAkB,YAAY,SAAS;AACvC,2BAAmB,OAAO,SAAS;AACnC,cAAM,QAAQ,SAAU,KAAK;AACzB,cAAI,eAAe,kBAAkB,WAAW,IAAI,GAAG,GAAG;AACtD,yBAAa,KAAK,cAAc;AAAA,UACpC;AACA,qBAAW,OAAO,GAAG;AAAA,QACzB,CAAC;AACD,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,SAAU,OAAO,YAAY,OAAO,gBAAgB;AACxD,uBAAe,YAAY,KAAK;AAChC,mBAAW,KAAK,EAAE,QAAQ,SAAU,KAAK;AACrC,cAAI,MAAM,GAAG,MAAM,WAAW,GAAG,GAAG;AAChC,gBAAI,eAAe,gBAAgB;AAC/B,2BAAa,KAAK,cAAc;AAAA,YACpC;AACA,uBAAW,GAAG,IAAI,MAAM,GAAG;AAAA,UAC/B;AAAA,QACJ,CAAC;AACD,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,SAAU,OAAO,UAAU;AAC/B,uBAAe,KAAK;AACpB,eAAO,MAAM,QAAQ;AAAA,MACzB;AAAA,IACJ;AACA,QAAI,iBAAiB,IAAI,QAAQ;AACjC,YAAQ,WAAW,eAAe,OAAO;AACzC,YAAQ,SAAS,eAAe;AAChC,YAAQ,UAAU,eAAe;AAEjC,YAAQ,QAAQ,UAAU,OAAO,UAAU,OAAO,QAAQ,SAAS,OAAO;AAE1E,aAAS,wBAAwB,OAAO,MAAM,SAAS;AACnD,gBAAU,MAAM,QAAQ,KAAK,GAAG,WAAY;AAAE,eAAO,kCAAkC,cAAc,OAAO,IAAI,0BAA0B,cAAc,KAAK,IAAI;AAAA,MAAK,CAAC;AACvK,yBAAmB,KAAK,OAAO,GAAG,OAAO;AAAA,IAC7C;AACA,aAAS,mBAAmB,MAAM,SAAS;AACvC,gBAAU,MAAM,QAAQ,IAAI,GAAG,WAAY;AAAE,eAAO,gCAAgC,cAAc,OAAO,IAAI,0BAA0B,cAAc,IAAI,IAAI;AAAA,MACnG,CAAC;AAAA,IAC/D;AACA,aAAS,iBAAiB,OAAO,MAAM;AACnC,gBAAU,MAAM,QAAQ,KAAK,GAAG,WAAY;AAAE,eAAO,iDAAiD,cAAc,KAAK;AAAA,MAAG,CAAC;AAC7H,sBAAgB,KAAK,OAAO;AAAA,IAChC;AACA,aAAS,gBAAgB,OAAO;AAC5B,gBAAU,MAAM,QAAQ,KAAK,GAAG,WAAY;AAAE,eAAO,sEAAsE,cAAc,KAAK,IAAI;AAAA,MACvF,CAAC;AAAA,IAChE;AACA,aAAS,eAAe,IAAI;AACxB,gBAAU,OAAO,OAAO,YAAY,WAAY;AAAE,eAAO,6DAA6D,cAAc,EAAE,IAAI;AAAA,MAAK,CAAC;AAAA,IACpJ;AACA,aAAS,aAAa,MAAM;AACxB,gBAAU,OAAO,KAAK,IAAI,EAAE,WAAW,GAAG,WAAY;AAAE,eAAO;AAAA,MAAwD,CAAC;AAAA,IAC5H;AACA,aAAS,eAAe,QAAQ,WAAW;AACvC,gBAAU,aAAa,OAAO,cAAc,UAAU,WAAY;AAAE,eAAO,2DAA2D,cAAc,SAAS;AAAA,MAAG,CAAC;AACjK,gBAAU,UAAU,OAAO,WAAW,UAAU,WAAY;AAAE,eAAO,6DAA6D,cAAc,MAAM;AAAA,MAAG,CAAC;AAAA,IAC9J;AACA,aAAS,kBAAkB,QAAQ,SAAS;AACxC,UAAI,eAAe,KAAK,MAAM;AAC9B,gBAAU,iBAAiB,SAAS,iBAAiB,OAAO,WAAY;AAAE,eAAO,eAAe,cAAc,OAAO,IAAI,+CAA+C,cAAc,YAAY;AAAA,MAAG,CAAC;AAAA,IAC1M;AAAA;AAAA;",
  "names": ["Context"]
}
